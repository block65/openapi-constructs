openapi: 3.1.0
info:
  title: Example REST API
  version: 1.0.0
components:
  schemas:
    Address:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        postcode:
          type: integer
          format: int32
          minimum: 1000
          maximum: 9999
    Id:
      type: string
    User:
      &a1
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        userId:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        address:
          $ref: "#/components/schemas/Address"
        age:
          type: integer
          format: int32
          minimum: 0
    UpdateUserRequest:
      type: object
      minProperties: 1
      additionalProperties: false
      properties:
        address:
          $ref: "#/components/schemas/Address"
        age:
          type: integer
          format: int32
          minimum: 0
    CreateUserRequest: *a1
    Users:
      type: array
      uniqueItems: true
      items:
        $ref: "#/components/schemas/User"
  parameters:
    UserId:
      name: userId
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Id"
  securitySchemes:
    HttpBearerJwtScheme:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /users:
    get:
      operationId: listUsersCommand
      tags:
        - user
      responses:
        "200":
          description: User 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
    post:
      operationId: createUserCommand
      tags:
        - user
        - random
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "200":
          description: User 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
  "/users/{userId}":
    get:
      operationId: getUserByIdCommand
      tags: []
      responses:
        "200":
          description: User 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      operationId: deleteUserByIdCommand
      security:
        - HttpBearerJwtScheme:
            &a2
            - users.delete
      tags:
        - user
        - random
    head:
      operationId: checkUserIdAvailableCommand
      security:
        - {}
      tags: []
    post:
      operationId: updateUserCommand
      tags: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    parameters:
      - $ref: "#/components/parameters/UserId"
security:
  - HttpBearerJwtScheme: []
  - HttpBearerJwtScheme: *a2
  - {}
